// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// npx prisma migrate dev --name init
// npx prisma generate (generates prisma client)

//  row structure of the models
// [name] [type] [field modifier] [field attributes]

// Admin n..n Contest OK
// Participant n..n Contest OK
// Participant 1..n Submission OK

// Contest 1..n Rule OK
// Contest 1..n Question OK
// Contest 1..n Level OK

// Question 1..n Constraint OK
// Question 1..n InputOutputExample OK
// Question n..n Level OK
// Question 1..n Submission OK

// Level 1..n Submission OK

model Admin {
  id       Int       @id @default(autoincrement())
  contests Contest[]

  name      String
  email     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Participant {
  id          Int                        @id @default(autoincrement())
  submissions Submission[]
  contests    ParticipantsJoinContests[]

  name      String
  email     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contest {
  id           Int                        @id @default(autoincrement())
  rules        Rule[]
  questions    Question[]
  levels       Level[]
  admins       Admin[]
  participants ParticipantsJoinContests[]

  acronym     String
  fullName    String
  cover       String
  description String
  place       String
  capacity    Int
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Explicit many-to-many relation, since the relation has an extra attribute: levelId
model ParticipantsJoinContests {
  id            Int         @id @default(autoincrement())
  contestId     Int
  contest       Contest     @relation(fields: [contestId], references: [id])
  participantId Int
  participant   Participant @relation(fields: [participantId], references: [id])
  levelId       Int
  level         Level       @relation(fields: [levelId], references: [id])
}

model Rule {
  id        Int     @id @default(autoincrement())
  contestId Int
  contest   Contest @relation(fields: [contestId], references: [id])

  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id                  Int                  @id @default(autoincrement())
  contestId           Int
  contest             Contest              @relation(fields: [contestId], references: [id])
  constraints         Constraint[]
  inputOutputExamples InputOutputExample[]
  submissions         Submission[]
  levels              Level[]

  balloonColor      String
  name              String
  inputExplanation  String
  outputExplanation String
  testsFileInput    String
  testsFileOutput   String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// question variables contraints
model Constraint {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// examples that are shown to the participant
model InputOutputExample {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  input     String
  output    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Level {
  id           Int                        @id @default(autoincrement())
  contestId    Int
  contest      Contest                    @relation(fields: [contestId], references: [id])
  submissions  Submission[]
  questions    Question[]
  participants ParticipantsJoinContests[]

  label     String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id            Int              @id @default(autoincrement())
  participantId Int
  participant   Participant      @relation(fields: [participantId], references: [id])
  questionId    Int
  question      Question         @relation(fields: [questionId], references: [id])
  levelId       Int
  level         Level            @relation(fields: [levelId], references: [id])
  status        SubmissionStatus

  code      String
  language  SubmissionLanguage
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum SubmissionLanguage {
  JAVA
  PYTHON
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  COMPILATION_ERROR
  RUNTIME_ERROR
  WRONG_ANSWER
  PRESENTATION_ERROR
  TIMEOUT
}
